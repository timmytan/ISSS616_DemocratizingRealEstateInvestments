arrange(join(df1, df2, df3), id)
join_all(dfList)
arrange(join_all(dfList), id)
## join function
library(plyr)
df1 <- data.frame(id = sample(1:10), x = rnorm(10))
df2 <- data.frame(id = sample(1:10), y = rnorm(10))
arrange(join(df1, df2), id)
df3 <- data.frame(id = sample(1:10), z = rnorm(10))
dfList <- list(df1, df2, df3)
arrange(join_all(dfList), id)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
title("Scatter plot")
plot(x, y, pch = 20)
title("scatterplot")
title("Scatter plot")
rm.title()
title("scatter")
plot(x, y, pch = 20)
title("Scatter Plot")
text(-2, -2, "Label")
legend("topleft", legend = "data", pch = 20)
fit <- lm(y ~ x)
?fit
?lm
abline(fit)
?abline
abline(fit, lwd =3, col = "blue")
?Devices
dev.get()
dev.cur()
dev.set(3)
abline(fit, lwd =3, col = "blue")
dev.cur()
dev.cur()
?transform
library(lattice)
?transform
library(datasets)
?transform
library(ggplot2)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
?geom
qplot(hwy, data = mpg, fill = drv)
## adding a statistic (i.e. a summary of the data) - e.g. loess (smoothing of data)
### point refers to data points,
qplot(displ, hwy, data = mpg, geom = c("smooth"))
"point",
## adding a statistic (i.e. a summary of the data) - e.g. loess (smoothing of data)
### point refers to data points,
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
## facets - separate plots that indicate subsets of data indicated by factor variable (like a panel plot)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
View(fit)
?nlme
install.packages(rafalib)
install.packages("rafalib")
library(rafalib)
library(rafalib)
## generate random data
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
## calculate distance (default = euclidean)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
## clustering
hClustering <- hclust(distxy)
plot(hClustering)
library(rafalib)
## generate random data
set.seed(1234)
par(mar = c(0, 0, 2, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
## calculate distance (default = euclidean)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
## clustering
hClustering <- hclust(distxy)
plot(hClustering)
## cluster separated by colors (rafalib::myplclust function)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
library(rafalib)
## generate random data
set.seed(1234)
par(mar = c(4, 2, 2, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
## calculate distance (default = euclidean)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
## clustering
hClustering <- hclust(distxy)
plot(hClustering)
## cluster separated by colors (rafalib::myplclust function)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
library(rafalib)
## generate random data
set.seed(1234)
par(mar = c(0, 4, 2, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
## calculate distance (default = euclidean)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
## clustering
hClustering <- hclust(distxy)
plot(hClustering)
## cluster separated by colors (rafalib::myplclust function)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
## heatmap()
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, center = 3)
names(kmeansObj)
kmeansObj
plot(kmeansObj)
kmeansObj$cluster
par(mar = c(0.2 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd =3)
par(mar = c(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd =3)
qplot(x, y, kmeansObj$cluster)
qplot(x, y, data = kmeansObj$cluster)
qplot(kmeansObj$cluster, data = dataFrame)
qplot(kmeansObj$cluster, data = dataFrame) + geom_col()
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd =3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
?kmeans
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 3), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
dataMatrix
dataFrame
dataMatrix
## heatmap
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj2$cluster)], yaxt = "n")
kmeansObj2
library(RMySQL)
## connect to source
ucscDB <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
source('~/Coursera/JHU Data Science Specialization/rmysql_example.R', echo=TRUE)
query
x <- 0:10
dbinom(x, 10, 0.5)
dbinom(0, 10, 0.5)
pbinom(x, 10 ,0.6)
pbinom(x, 10 ,0.5)
x <- 1:10
dbinom(x, 10, 0.5)
dbinom(0, 10, 0.5)
pbinom(x, 10, 0.5)
x <- 0:10
dbinom(x, 10, 0.5)
dbinom(0, 10, 0.5)
pbinom(x, 10, 0.5)
x <- 0:10
dbinom(x, 10, 0.5)
dbinom(0, 10, 0.5)
pbinom(x, 10, 0.5)
source('~/MITB Coursework/ISSS616 Applied Statistical Analysis with R/Week 3/lesson3examples.R', echo=TRUE)
plot(x, dbinom(x, 10, 0.5), xlab = "Number of Heads", ylab = "P(X=x)", type = "h", main = "Heads, n = 10, p = 0.5")
?qbinom
## simulate randomness
rbinom(58 , 10, 0.5)
?rbinom
source('~/MITB Coursework/ISSS616 Applied Statistical Analysis with R/Week 3/lesson3examples.R', echo=TRUE)
qbinom(0.95, 8, 0.5)
qbinom(0.95, 5, 0.5)
qbinom(0.5, 5, 0.5)
pnorm(2)
1-pnorm(2)
pnorm(-2)
## tutorial 1 q1
pnorm(60, 48, 8)
dbinom(5, 14, 0.13)
pbinom(4, 14, 0.13)
## tutorial 1 q3
pnorm(120, 100, sqrt(121))
## tutorial 1 q3
1 - pnorm(120, 100, sqrt(121))
pnorm(115, 100, sqrt(121)) - pnorm(85, 100, sqrt(121))
sample_means <- rep(NA, 1000)
for (i in 1:1000) {
sample_means[i] = mean(rexp(40 , 0.2))
}
?rexp
mean(sample_means)
1/0.2
var(sample_means)
((1/0.2)^2)/40
var(sample_means)
((1/0.2)^2)/40
?replications
?rep
sample_means
sample_means[1]
sample_means[2]
rexp(40, 0.2)
hist(sample_means, main = "", xlab = "Sample Means", prob = T, col = "darkred")
lines(density(sample_means), col = "darkblue", lwd = 2)
qqplot(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
qqplot(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
qqplot(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
qqplot(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
sample_means
qqnorm(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
qqline(sample_means, col = "darkblue", lwd = 8)
qqline(sample_means, col = "darkblue", lwd = 3)
qqline(sample_means, col = "darkblue", lwd = 3)
dev.off()
qqline(sample_means, col = "darkblue", lwd = 3)
qqnorm(sample_means, col = "darkred", main = "Normal QQ Plot")
qqline(sample_means, col = "darkblue", lwd = 3)
hist(sample_means, main = "", xlab = "Sample Means", prob = T, col = "darkred")
lines(density(sample_means), col = "darkblue", lwd = 2)
## Tutorial 4
## Q1
1 - pnorm(120, 100, sqrt(121))
1 - pnorm(120, 100, sqrt(121))
pnorm(115, 100, sqrt(121)) - pnorm(85, 100, sqrt(121))
pnorm(115, 100, sqrt(121)) - pnorm(85, 100, sqrt(121))
## Q2
pnorm(115, 100, sqrt(121)/sqrt(36)) - pnorm(85, 100, sqrt(121)/sqrt(36))
## Q3
pnorm(0.52, 0.6, 150)
## Q3
pbinom(0.52, 0.6)
## Q3
rbinom(0.52, 0.6)
## Q3
pnorm(0.52, 0.6)
## Q3
pnorm(0.52, 0.6, sqrt(0.6(0.4)/150))
## Q3
pnorm(0.52, 0.6, sqrt(0.6(0.4/150))
## Q3
pnorm(0.52, 0.6, sqrt(0.6(0.4/150)))
## Q3
pnorm(0.52, 0.6, sqrt(0.6(0.4/150)))
## Q3
pnorm(0.52, 0.6, sqrt(0.6*0.4/150))
library(shiny)
runExample("01_hello")
fractions(var(x))
library(MASS)
x <- c(-2, -1, -1, 0, 0, 1, 1, 2)
mean(x)
## ***cannot use these to find population variance because n-1 is used as denominator by default.
fractions(var(x))
fractions(sd(x)^2)
receive <- 0.8
didntreceive <- 0.2
adoptreceive <- 0.2
didntadoptreceive <- 0.8
adoptdidntreceive <- 0.1
didntadoptdidntreceive <- 0.9
receiveadopt <- (adoptreceive * receive) / ((adoptreceive * receive) + (adoptdidntreceive * didntreceive))
fractions(receiveadopt)
cacao <- read.csv("http://datasciencelab.co/datasets/flavors_of_cacao.html")
View(cacao)
summary(cacao)
?summary
x = seq(3,30,5)
y = x[x>16 | x < 8]
z = rep(rep(seq(-1,1),rep(2,3)),2)
w = c(y,z)
w
f <- function(a, b) {
a^2
}
f(2)
summary(cacao["Ratings"])
cacao["Ratings"]
cacao[Ratings]
summary(cacao)
getmode(cacao)
getmode <- function(v){
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(cacao)
getmode(cacao[,"Rating"])
fractions(.25/.78)
fractions(.25*.75/.78)
fractions(.25*.75*.8/.78)
fractions(.1/(.1+5/26))
fractions(.5*.2/(.5*.2+.25*.75*.8/.78))
fractions(.5*.2/(.5*.2+.75*.8))
fractions(.5*.2/(.5*.2+(.25/.78+.25)*.75*.8))
install.packages("devtools")
install.packages("Rcpp")
install.packages("RCurl")
install.packages("RJSONIO")
library(devtools)
library(Rcpp)
library(RCurl)
library(RJSONIO)
install.packages("bitops")
install.packages("C:/rcharts", repos = NULL, type="source")
?rchart
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
?renderChart
?renderChart2
shiny::runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
warnings()
?showOutput
ui <- dashboardPage(skin = "green",
dashboardHeader(title = "Democratizing Real Estate Investments"),
dashboardSidebar(),
dashboardBody(
fluidRow(
column(width = 12,
valueBoxOutput("median2018Box", width = 3),
valueBoxOutput("annualizedChangeInMedianBox", width =4)
)
),
fluidRow(
column(width = 6,
box(
title = "Top 10 Areas by Annualized Growth Rate",
status = "primary",
width = 12,
solidHeader = FALSE,
collapsible = TRUE,
showOutput("top10PlanningAreaTS", "nvd3")
)
)
)
)
)
showOutput("top10PlanningAreaTS", "nvd3")
output$top10PlanningAreaTS <- renderChart({
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
med2014 <- aggregate(year2014$TransactedPrice ~ year2014$PlanningArea, FUN = median)
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
combine$overallChange <- (combine$`year2018$TransactedPrice` - combine$`year2014$TransactedPrice`)/combine$`year2014$TransactedPrice`
combine$annualizedChange <- (1 + combine$overallChange)^(1/5) - 1
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
})
renderChart({
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
med2014 <- aggregate(year2014$TransactedPrice ~ year2014$PlanningArea, FUN = median)
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
combine$overallChange <- (combine$`year2018$TransactedPrice` - combine$`year2014$TransactedPrice`)/combine$`year2014$TransactedPrice`
combine$annualizedChange <- (1 + combine$overallChange)^(1/5) - 1
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
})
output$top10PlanningAreaTS <- renderChart({
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
med2014 <- aggregate(year2014$TransactedPrice ~ year2014$PlanningArea, FUN = median)
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
combine$overallChange <- (combine$`year2018$TransactedPrice` - combine$`year2014$TransactedPrice`)/combine$`year2014$TransactedPrice`
combine$annualizedChange <- (1 + combine$overallChange)^(1/5) - 1
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
})
plot
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
med2014 <- aggregate(year2014$TransactedPrice ~ year2014$PlanningArea, FUN = median)
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
combine$overallChange <- (combine$`year2018$TransactedPrice` - combine$`year2014$TransactedPrice`)/combine$`year2014$TransactedPrice`
combine$annualizedChange <- (1 + combine$overallChange)^(1/5) - 1
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
View(ui)
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
plot
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
year2018 <- realis[which(year(d) == 2018),]
d <- as.Date(x = realis$SaleDate, "%d-%B-%Y")
year2018 <- realis[which(year(d) == 2018),]
shiny::runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
plot
output$top10PlanningAreaTS <- renderChart({
med2018 <- aggregate(year2018$TransactedPrice ~ year2018$PlanningArea, FUN = median)
med2014 <- aggregate(year2014$TransactedPrice ~ year2014$PlanningArea, FUN = median)
combine <- merge(med2014, med2018, by.x = "year2014$PlanningArea", by.y = "year2018$PlanningArea")
combine$overallChange <- (combine$`year2018$TransactedPrice` - combine$`year2014$TransactedPrice`)/combine$`year2014$TransactedPrice`
combine$annualizedChange <- (1 + combine$overallChange)^(1/5) - 1
top10 <- arrange(combine, desc(annualizedChange))[1:10,]
plot <- ggplot(data = top10, aes(x = top10$`year2014$PlanningArea`, y = top10$annualizedChange, xlab("Planning Area"))) + geom_bar(stat = "identity")
})
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
shiny::runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
install.packages(shinyjs)
install.packages("shinyjs")
library(shinyjs)
jQuery_max_code <- "shinyjs.getMax = function(){alert($('#mySlider .irs-max').text());}"
?shinyjs
input$childcareDist[1]
?reactive
dflt
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
dflt
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
shiny::runApp('MITB Coursework/ISSS616 Applied Statistical Analysis with R/Project/Application/ISSS616_DemocratizingRealEstateInvestments')
shiny::runApp()
library(stringr)
str_extract(realis$Tenure, "d+")
str_extract(realis$Tenure, "\\d+")
as.numeric(str_extract(realis$Tenure, "\\d+"))
realis$Tenure <- if(as.numeric(str_extract(realis$Tenure, "\\d+")) < 99, "Leasehold")
if{as.numeric(str_extract(realis$Tenure, "\\d+")) < 99, "Leasehold"}
if(as.numeric(str_extract(realis$Tenure, "\\d+")) < 99) { realis$Tenure = "Leasehold" }
for (i in 1:length(realis)) {
if (as.numeric(str_extract(realis$Tenure, "\\d+")) <= 99) {
realis$Tenure = "99 Year Leasehold"
}
}
head(realis)
shiny::runApp()
for (i in 1:length(realis)) {
d <- as.numeric(str_extract(realis$Tenure, "\\d+"))
if (d <= 200) {
realis$Tenure = "Leasehold"
} else "Freehold"
}
unique(realis$Tenure)
for (i in 1:length(realis)) {
d <- as.numeric(str_extract(realis$Tenure, "\\d+"))
ifelse (d <= 200, realis$Tenure = "Leasehold", realis$Tenure = "Freehold")
}
ifelse (d <= 200, realis$Tenure = "Leasehold", realis$Tenure = "Freehold")
ifelse (d <= 200, "Leasehold", d = "Freehold")
ifelse (d <= 200, "Leasehold", "Freehold")
d <- as.numeric(str_extract(realis$Tenure, "\\d+"))
ifelse (d <= 200, "Leasehold", "Freehold")
for (i in 1:length(realis)) {
d <- as.numeric(str_extract(realis$Tenure, "\\d+"))
ifelse (d <= 200, "Leasehold", "Freehold")
}
d
realis$Tenure = d
realis$Tenure
